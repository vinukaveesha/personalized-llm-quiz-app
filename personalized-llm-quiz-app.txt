
================================================================================
File: .gitignore
Size: 225 B
================================================================================

*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties


================================================================================
File: .idea/.gitignore
Size: 47 B
================================================================================

# Default ignored files
/shelf/
/workspace.xml


================================================================================
File: .idea/.name
Size: 10 B
================================================================================

LLMExample

================================================================================
File: .idea/AndroidProjectSystem.xml
Size: 212 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AndroidProjectSystem">
    <option name="providerId" value="com.android.tools.idea.GradleProjectSystem" />
  </component>
</project>

================================================================================
File: .idea/compiler.xml
Size: 169 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <bytecodeTargetLevel target="21" />
  </component>
</project>

================================================================================
File: .idea/deploymentTargetSelector.xml
Size: 652 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="deploymentTargetSelector">
    <selectionStates>
      <SelectionState runConfigName="app">
        <option name="selectionMode" value="DROPDOWN" />
        <DropdownSelection timestamp="2025-04-08T07:23:45.762394700Z">
          <Target type="DEFAULT_BOOT">
            <handle>
              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\devgr\.android\avd\Pixel_9_Pro_API_35.avd" />
            </handle>
          </Target>
        </DropdownSelection>
        <DialogSelection />
      </SelectionState>
    </selectionStates>
  </component>
</project>

================================================================================
File: .idea/gradle.xml
Size: 757 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GradleMigrationSettings" migrationVersion="1" />
  <component name="GradleSettings">
    <option name="linkedExternalProjectsSettings">
      <GradleProjectSettings>
        <option name="testRunner" value="CHOOSE_PER_TEST" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
        <option name="modules">
          <set>
            <option value="$PROJECT_DIR$" />
            <option value="$PROJECT_DIR$/app" />
          </set>
        </option>
        <option name="resolveExternalAnnotations" value="false" />
      </GradleProjectSettings>
    </option>
  </component>
</project>

================================================================================
File: .idea/migrations.xml
Size: 254 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectMigrations">
    <option name="MigrateToGradleLocalJavaHome">
      <set>
        <option value="$PROJECT_DIR$" />
      </set>
    </option>
  </component>
</project>

================================================================================
File: .idea/misc.xml
Size: 409 B
================================================================================

<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/build/classes" />
  </component>
  <component name="ProjectType">
    <option name="id" value="Android" />
  </component>
</project>

================================================================================
File: .idea/runConfigurations.xml
Size: 964 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RunConfigurationProducerService">
    <option name="ignoredProducers">
      <set>
        <option value="com.intellij.execution.junit.AbstractAllInDirectoryConfigurationProducer" />
        <option value="com.intellij.execution.junit.AllInPackageConfigurationProducer" />
        <option value="com.intellij.execution.junit.PatternConfigurationProducer" />
        <option value="com.intellij.execution.junit.TestInClassConfigurationProducer" />
        <option value="com.intellij.execution.junit.UniqueIdConfigurationProducer" />
        <option value="com.intellij.execution.junit.testDiscovery.JUnitTestDiscoveryConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinJUnitRunConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinPatternConfigurationProducer" />
      </set>
    </option>
  </component>
</project>

================================================================================
File: .idea/vcs.xml
Size: 180 B
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>

================================================================================
File: README.md
Size: 410 B
================================================================================

# Running the code:
1. First run the backend code.
2. Clone the repo to Andriod Studio
3. Let all files/gradle setup finish.
4. Run as normal android app.

# Note: 
If you are using different port than 5000 in backend, then change it to different port in the code as well.

# Output:

<img src="loading_message.png" width="250" alt="Loading Message">

<img src="quiz_loaded.png" width="250" alt="Quiz loaded">


================================================================================
File: app/.gitignore
Size: 6 B
================================================================================

/build

================================================================================
File: app/build.gradle
Size: 1.02 kB
================================================================================

plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'com.example.llmexample'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.llmexample"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {

    implementation 'com.android.volley:volley:1.2.1'

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}

================================================================================
File: app/proguard-rules.pro
Size: 750 B
================================================================================

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================================================================================
File: app/src/androidTest/java/com/example/llmexample/ExampleInstrumentedTest.java
Size: 758 B
================================================================================

package com.example.llmexample;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.llmexample", appContext.getPackageName());
    }
}

================================================================================
File: app/src/main/AndroidManifest.xml
Size: 2.51 kB
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.LLMExample"
        tools:targetApi="31"
        android:networkSecurityConfig="@xml/network_security_config">

        <!-- Main Entry Point -->
        <activity
            android:name="MainActivity"
            android:exported="true"
            android:theme="@style/Theme.LLMExample.Launcher">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- Login Flow -->
        <activity
            android:name=".activity.LoginActivity"
            android:exported="false"
            android:theme="@style/Theme.LLMExample.NoActionBar" />

        <activity
            android:name=".activity.SignupActivity"
            android:exported="false"
            android:theme="@style/Theme.LLMExample.NoActionBar" />

        <!-- Topic Selection -->
        <activity
            android:name=".activity.TopicSelectionActivity"
            android:exported="false"
            android:theme="@style/Theme.LLMExample.NoActionBar" />

        <!-- Main App Flow -->
        <activity
            android:name=".activity.DashboardActivity"
            android:exported="false"
            android:theme="@style/Theme.LLMExample.NoActionBar"
            android:launchMode="singleTop"/>

        <!-- Quiz Flow -->
        <activity
            android:name=".activity.QuizActivity"
            android:exported="false"
            android:theme="@style/Theme.LLMExample.NoActionBar"
            android:screenOrientation="portrait" />

        <activity
            android:name=".activity.ResultsActivity"
            android:exported="false"
            android:theme="@style/Theme.LLMExample.NoActionBar" />

    </application>

</manifest>

================================================================================
File: app/src/main/java/com/example/llmexample/MainActivity.java
Size: 1.11 kB
================================================================================

package com.example.llmexample;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;

import com.example.llmexample.activity.DashboardActivity;
import com.example.llmexample.activity.LoginActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Check if user is already logged in
        SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
        String username = prefs.getString("username", null);

        Intent intent;
        if (username != null && !username.isEmpty()) {
            // User is logged in, go directly to dashboard
            intent = new Intent(this, DashboardActivity.class);
        } else {
            // No logged in user, show login screen
            intent = new Intent(this, LoginActivity.class);
        }

        startActivity(intent);
        finish(); // Close MainActivity to prevent returning to it
    }
}

================================================================================
File: app/src/main/java/com/example/llmexample/activity/DashboardActivity.java
Size: 6.48 kB
================================================================================

package com.example.llmexample.activity;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.llmexample.R;
import com.example.llmexample.adapter.QuestionAdapter;
import com.example.llmexample.adapter.TaskAdapter;
import com.example.llmexample.helper.DatabaseHelper;
import com.example.llmexample.model.Task;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DashboardActivity extends AppCompatActivity {
    private static final String TAG = "DashboardActivity";
    private TextView tvWelcome, tvTaskCount;
    private RecyclerView rvTasks;
    private DatabaseHelper dbHelper;
    private TaskAdapter adapter;
    // In DashboardActivity's setupRecyclerView()
    // In DashboardActivity.java
    private void setupRecyclerView() {
        rvTasks = findViewById(R.id.rvTasks);
        rvTasks.setLayoutManager(new LinearLayoutManager(this));

        // Use TaskAdapter with String parameter
        adapter = new TaskAdapter(new ArrayList<>(), topic -> {
            startQuizActivity(topic);
        });

        rvTasks.setAdapter(adapter);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dashboard);

        initializeViews();
        setupRecyclerView();
        loadUserData();
        loadTasks();
    }

    private void initializeViews() {
        dbHelper = new DatabaseHelper(this);
        tvWelcome = findViewById(R.id.tvWelcome);
        tvTaskCount = findViewById(R.id.tvTaskCount);
        rvTasks = findViewById(R.id.rvTasks);
    }

    private void loadUserData() {
        SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
        String username = prefs.getString("username", "");
        tvWelcome.setText(getString(R.string.welcome_message, username));
    }

    private void loadTasks() {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Handler handler = new Handler(Looper.getMainLooper());

        executor.execute(() -> {
            // Background work
            String username = getCurrentUsername();
            int userId = dbHelper.getUserId(username);
            List<String> topics = dbHelper.getUserTopics(userId);
            List<Task> tasks = createTasksFromTopics(topics);

            handler.post(() -> {
                // UI Thread work
                handleTasksLoaded(tasks);
            });
        });

    }

    private List<Task> createTasksFromTopics(List<String> topics) {
        List<Task> tasks = new ArrayList<>();
        for (String topic : topics) {
            tasks.add(new Task(
                    topic,
                    "Complete quiz on " + topic,
                    "Generated by AI"
            ));
        }
        return tasks;
    }

    private void handleTasksLoaded(List<Task> tasks) {
        if (tasks == null || tasks.isEmpty()) {
            showNoTasksError();
        } else {
            updateTaskDisplay(tasks);
        }
    }

    private void showNoTasksError() {
        Toast.makeText(this,
                "No tasks found! Please select topics first",
                Toast.LENGTH_LONG).show();
        redirectToTopicSelection();
    }

    private void updateTaskDisplay(List<Task> tasks) {
        tvTaskCount.setText(getString(R.string.task_count, tasks.size()));
        adapter.updateTasks(tasks);  // This should be using TaskAdapter
    }

    private void redirectToTopicSelection() {
        startActivity(new Intent(this, TopicSelectionActivity.class));
        finish();
    }

    private String getCurrentUsername() {
        SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
        return prefs.getString("username", "");
    }

    private void startQuizActivity(String topic) {
        Intent intent = new Intent(this, QuizActivity.class);
        intent.putExtra("TOPIC", topic);
        startActivity(intent);
    }

    @Override
    protected void onResume() {
        super.onResume();
        loadTasks(); // Refresh tasks when returning to dashboard
    }

    private static class LoadTasksAsync extends AsyncTask<Void, Void, List<Task>> {
        private final WeakReference<DashboardActivity> activityReference;

        LoadTasksAsync(DashboardActivity context) {
            activityReference = new WeakReference<>(context);
        }

        @Override
        protected List<Task> doInBackground(Void... voids) {
            DashboardActivity activity = activityReference.get();
            if (activity == null || activity.isFinishing()) return null;

            try {
                String username = activity.getCurrentUsername();
                int userId = activity.dbHelper.getUserId(username);

                if (userId == -1) {
                    Log.e(TAG, "User not found in database");
                    return null;
                }

                List<String> topics = activity.dbHelper.getUserTopics(userId);
                Log.d(TAG, "Found " + topics.size() + " topics for user " + userId);

                return createTasksFromTopics(topics);
            } catch (Exception e) {
                Log.e(TAG, "Error loading tasks: " + e.getMessage(), e);
                return null;
            }
        }

        private List<Task> createTasksFromTopics(List<String> topics) {
            List<Task> tasks = new ArrayList<>();
            for (String topic : topics) {
                tasks.add(new Task(
                        topic,
                        "Complete quiz on " + topic,
                        "Generated by AI"
                ));
            }
            return tasks;
        }

        @Override
        protected void onPostExecute(List<Task> tasks) {
            DashboardActivity activity = activityReference.get();
            if (activity != null && !activity.isFinishing()) {
                activity.handleTasksLoaded(tasks);
            }
        }
    }
}

================================================================================
File: app/src/main/java/com/example/llmexample/activity/LoginActivity.java
Size: 2.73 kB
================================================================================

package com.example.llmexample.activity;

import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.llmexample.R;
import com.example.llmexample.helper.DatabaseHelper;

import java.util.List;

public class LoginActivity extends AppCompatActivity {
    private EditText etUsername, etPassword;
    private DatabaseHelper dbHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        dbHelper = new DatabaseHelper(this);
        etUsername = findViewById(R.id.etUsername);
        etPassword = findViewById(R.id.etPassword);

        findViewById(R.id.btnLogin).setOnClickListener(v -> attemptLogin());
        findViewById(R.id.tvSignup).setOnClickListener(v ->
                startActivity(new Intent(this, SignupActivity.class)));
    }

    private void attemptLogin() {
        String username = etUsername.getText().toString();
        String password = etPassword.getText().toString();

        if (validateCredentials(username, password)) {
            SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
            prefs.edit().putString("username", username).apply();

            int userId = dbHelper.getUserId(username);
            List<String> userTopics = dbHelper.getUserTopics(userId);

            // Check if user has selected topics
            if (userTopics.isEmpty()) {
                startActivity(new Intent(this, TopicSelectionActivity.class));
            } else {
                startActivity(new Intent(this, DashboardActivity.class));
            }
            finish();
        } else {
            Toast.makeText(this, "Invalid credentials", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean validateCredentials(String username, String password) {
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        String[] columns = {DatabaseHelper.COLUMN_ID}; // Fixed reference
        String selection = DatabaseHelper.COLUMN_USERNAME + " = ? AND " +
                DatabaseHelper.COLUMN_PASSWORD + " = ?"; // Fixed reference
        String[] selectionArgs = {username, password};

        Cursor cursor = db.query(DatabaseHelper.TABLE_USERS, // Fixed reference
                columns,
                selection,
                selectionArgs,
                null, null, null);
        int count = cursor.getCount();
        cursor.close();
        return count > 0;
    }


}


================================================================================
File: app/src/main/java/com/example/llmexample/activity/QuizActivity.java
Size: 9.18 kB
================================================================================

package com.example.llmexample.activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.example.llmexample.R;
import com.example.llmexample.adapter.QuestionAdapter;
import com.example.llmexample.helper.DatabaseHelper;
import com.example.llmexample.model.Question;

import org.json.JSONArray;
import org.json.JSONObject;
import java.util.ArrayList;
import java.util.List;

public class QuizActivity extends AppCompatActivity {
    private List<Question> questions = new ArrayList<>();
    private int currentQuestionIndex = 0;
    private int score = 0;

    // UI Components
    private TextView tvQuestion, tvProgress;
    private RadioGroup radioGroup;
    private RadioButton[] optionButtons;
    private Button btnNext;
    private ProgressBar progressBar;
    private DatabaseHelper dbHelper;

    // Network configuration
    private static final int REQUEST_TIMEOUT_MS = 30000;
    private static final int MAX_RETRIES = 0;
    private static final float BACKOFF_MULTIPLIER = 1.0f;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_quiz);

        dbHelper = new DatabaseHelper(this);
        initializeUIComponents();
        String topic = getIntent().getStringExtra("TOPIC");
        fetchQuizQuestions(topic);
    }

    private void initializeUIComponents() {
        tvQuestion = findViewById(R.id.tvQuestion);
        tvProgress = findViewById(R.id.tvProgress);
        radioGroup = findViewById(R.id.radioGroup);
        btnNext = findViewById(R.id.btnNext);
        progressBar = findViewById(R.id.progressBar);

        optionButtons = new RadioButton[4];
        optionButtons[0] = findViewById(R.id.optionA);
        optionButtons[1] = findViewById(R.id.optionB);
        optionButtons[2] = findViewById(R.id.optionC);
        optionButtons[3] = findViewById(R.id.optionD);

        btnNext.setOnClickListener(v -> handleNextButton());
    }

    private void fetchQuizQuestions(String topic) {
        Log.d("QuizActivity", "Starting quiz fetch for topic: " + topic);
        progressBar.setVisibility(View.VISIBLE);

        String encodedTopic = Uri.encode(topic);
        String url = "http://192.168.8.155:5000/getQuiz?topic=" + encodedTopic;
        Log.d("QuizActivity", "Request URL: " + url);

        RequestQueue queue = Volley.newRequestQueue(this);

        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
                Request.Method.GET, url, null,
                response -> {
                    Log.d("QuizActivity", "Raw API response: " + response.toString());
                    progressBar.setVisibility(View.GONE);
                    try {
                        JSONArray quizArray = response.getJSONArray("quiz");
                        if (quizArray.length() == 0) {
                            throw new Exception("Empty quiz response from server");
                        }
                        parseQuestions(quizArray);
                        showQuestion(currentQuestionIndex);
                    } catch (Exception e) {
                        Log.e("QuizActivity", "Response parsing error", e);
                        showError("Error parsing questions: " + e.getMessage());
                    }
                },
                error -> {
                    Log.e("QuizActivity", "Volley error: " + error.getMessage());
                    progressBar.setVisibility(View.GONE);
                    showError("Network error: " + error.getMessage());
                }
        );
        // Configure timeout and retry policy
        jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(
                REQUEST_TIMEOUT_MS,
                MAX_RETRIES,
                BACKOFF_MULTIPLIER
        ));

        queue.add(jsonObjectRequest);
    }


    private void parseQuestions(JSONArray quizArray) throws Exception {
        questions.clear();
        Log.d("QuizActivity", "Parsing " + quizArray.length() + " questions");

        for (int i = 0; i < quizArray.length(); i++) {
            JSONObject q = quizArray.getJSONObject(i);

            String questionText = q.optString("question", "")
                    .replace("`", "")
                    .trim();

            JSONArray originalOptions = q.optJSONArray("options");
            if (originalOptions == null || originalOptions.length() < 4) {
                throw new Exception("Invalid options at index " + i);
            }

            String correctAnswer = q.optString("correct_answer", "")
                    .trim()
                    .toUpperCase();

            if (correctAnswer.isEmpty() || correctAnswer.charAt(0) < 'A' || correctAnswer.charAt(0) > 'D') {
                throw new Exception("Invalid correct answer at index " + i + ": " + correctAnswer);
            }

            JSONArray cleanedOptions = new JSONArray();
            for (int j = 0; j < originalOptions.length(); j++) {
                String cleanedOption = originalOptions.getString(j)
                        .replace("`", "")
                        .trim();
                cleanedOptions.put(cleanedOption);
            }

            int correctIndex = correctAnswer.charAt(0) - 'A';
            questions.add(new Question(questionText, cleanedOptions, correctIndex));

            Log.d("QuizActivity", "Added question: " + questionText);
        }
    }

    private void showQuestion(int index) {
        if (index >= questions.size()) {
            showResults();
            return;
        }

        Question currentQuestion = questions.get(index);
        tvQuestion.setText(currentQuestion.getQuestion());
        tvProgress.setText((index + 1) + "/" + questions.size());

        JSONArray options = currentQuestion.getOptions();
        try {
            for (int i = 0; i < 4; i++) {
                if (i < options.length()) {
                    optionButtons[i].setVisibility(View.VISIBLE);
                    optionButtons[i].setText(options.getString(i));
                } else {
                    optionButtons[i].setVisibility(View.GONE);
                }
            }
        } catch (Exception e) {
            Log.e("QuizActivity", "Error setting options", e);
        }

        radioGroup.clearCheck();
        updateButtonText();
    }

    private void handleNextButton() {
        int selectedId = radioGroup.getCheckedRadioButtonId();
        if (selectedId == -1) {
            Toast.makeText(this, "Please select an answer", Toast.LENGTH_SHORT).show();
            return;
        }

        // Get the position of the selected radio button
        int selectedIndex = radioGroup.indexOfChild(findViewById(selectedId));

        // Compare with stored correct index
        if (selectedIndex == questions.get(currentQuestionIndex).getCorrectIndex()) {
            score++;
        }

        currentQuestionIndex++;
        showQuestion(currentQuestionIndex);
    }

    private void updateButtonText() {
        btnNext.setText(currentQuestionIndex < questions.size() - 1 ? "Next" : "Finish");
    }

    private void showResults() {
        if (questions.isEmpty()) {
            Toast.makeText(this, "No questions attempted!", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }
        // Save result to database
        SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
        String username = prefs.getString("username", "");
        int userId = dbHelper.getUserId(username);
        dbHelper.addQuizResult(userId, score, questions.size());

        Intent intent = new Intent(this, ResultsActivity.class);
        intent.putExtra("SCORE", score);
        intent.putExtra("TOTAL", questions.size());
        startActivity(intent);
        finish();
    }

    private void showError(String message) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show();
        Log.e("QuizActivity", "Error occurred: " + message);
        finish();
    }

    public static class Question {
        private final String question;
        private final JSONArray options;
        private final int correctIndex; // Changed from String to int

        public Question(String question, JSONArray options, int correctIndex) {
            this.question = question;
            this.options = options;
            this.correctIndex = correctIndex;
        }

        public String getQuestion() { return question; }
        public JSONArray getOptions() { return options; }
        public int getCorrectIndex() { return correctIndex; }
    }
}


================================================================================
File: app/src/main/java/com/example/llmexample/activity/ResultsActivity.java
Size: 826 B
================================================================================

package com.example.llmexample.activity;

import android.content.Intent;
import android.os.Bundle;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import com.example.llmexample.R;

public class ResultsActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_results);

        TextView tvScore = findViewById(R.id.tvScore);
        int score = getIntent().getIntExtra("SCORE", 0);
        int total = getIntent().getIntExtra("TOTAL", 0);

        tvScore.setText(String.format("Score: %d/%d", score, total));

        findViewById(R.id.btnContinue).setOnClickListener(v ->
                startActivity(new Intent(this, DashboardActivity.class)));
    }
}

================================================================================
File: app/src/main/java/com/example/llmexample/activity/SignupActivity.java
Size: 1.35 kB
================================================================================

package com.example.llmexample.activity;

import android.content.Intent;
import android.os.Bundle;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.llmexample.R;
import com.example.llmexample.helper.DatabaseHelper;

public class SignupActivity extends AppCompatActivity {
    private EditText etUsername, etPassword;
    private DatabaseHelper dbHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_signup);

        dbHelper = new DatabaseHelper(this);
        etUsername = findViewById(R.id.etUsername);
        etPassword = findViewById(R.id.etPassword);

        findViewById(R.id.btnSignup).setOnClickListener(v -> attemptSignup());
    }

    private void attemptSignup() {
        String username = etUsername.getText().toString();
        String password = etPassword.getText().toString();

        if (dbHelper.addUser(username, password)) {
            Toast.makeText(this, "Registration successful!", Toast.LENGTH_SHORT).show();
            startActivity(new Intent(this, TopicSelectionActivity.class));
            finish();
        } else {
            Toast.makeText(this, "Registration failed", Toast.LENGTH_SHORT).show();
        }
    }
}

================================================================================
File: app/src/main/java/com/example/llmexample/activity/TopicSelectionActivity.java
Size: 4.08 kB
================================================================================

package com.example.llmexample.activity;

import android.content.ContentValues;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.GridView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.llmexample.R;
import com.example.llmexample.helper.DatabaseHelper;

import java.util.ArrayList;
import java.util.List;

public class TopicSelectionActivity extends AppCompatActivity {
    private static final String[] ALL_TOPICS = {"Data Structures", "Web Development", "Testing", "AI"};
    private DatabaseHelper dbHelper;
    private ArrayList<String> selectedTopics = new ArrayList<>();
    private TopicAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_topic_selection);

        dbHelper = new DatabaseHelper(this);
        GridView gridView = findViewById(R.id.gridTopics);

        adapter = new TopicAdapter();
        gridView.setAdapter(adapter);

        gridView.setOnItemClickListener((parent, view, position, id) -> {
            String topic = ALL_TOPICS[position];
            toggleTopicSelection(topic);
            adapter.notifyDataSetChanged(); // Update all views
        });

        findViewById(R.id.btnContinue).setOnClickListener(v -> saveTopicsAndContinue());
    }

    private void toggleTopicSelection(String topic) {
        if (selectedTopics.contains(topic)) {
            selectedTopics.remove(topic);
        } else {
            if (selectedTopics.size() < 10) {
                selectedTopics.add(topic);
            }
        }
    }

    private class TopicAdapter extends BaseAdapter {
        @Override
        public int getCount() { return ALL_TOPICS.length; }

        @Override
        public Object getItem(int position) { return ALL_TOPICS[position]; }

        @Override
        public long getItemId(int position) { return position; }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            Button button = (Button) (convertView != null ? convertView :
                    getLayoutInflater().inflate(R.layout.grid_item_topic, parent, false));

            String topic = ALL_TOPICS[position];
            button.setText(topic);
            button.setSelected(selectedTopics.contains(topic));

            // Update background color based on selection
            button.setBackgroundColor(selectedTopics.contains(topic)
                    ? getResources().getColor(R.color.selected_topic_color)
                    : getResources().getColor(R.color.default_topic_color));

            return button;
        }
    }

    private void saveTopicsAndContinue() {
        if (selectedTopics.isEmpty()) {
            Toast.makeText(this, "Please select at least 1 topic", Toast.LENGTH_SHORT).show();
            return;
        }

        String username = getSharedPreferences("user_prefs", MODE_PRIVATE)
                .getString("username", "");
        int userId = dbHelper.getUserId(username);

        if (userId == -1) {
            Toast.makeText(this, "User not found!", Toast.LENGTH_SHORT).show();
            return;
        }

        new Thread(() -> {
            dbHelper.addUserTopics(userId, selectedTopics);
            List<String> savedTopics = dbHelper.getUserTopics(userId);

            runOnUiThread(() -> {
                if (savedTopics.containsAll(selectedTopics)) {
                    startActivity(new Intent(this, DashboardActivity.class));
                    finish();
                } else {
                    Toast.makeText(this, "Failed to save topics!", Toast.LENGTH_LONG).show();
                }
            });
        }).start();
    }
}

================================================================================
File: app/src/main/java/com/example/llmexample/adapter/QuestionAdapter.java
Size: 2.08 kB
================================================================================

package com.example.llmexample.adapter;


import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import com.example.llmexample.R;
import com.example.llmexample.activity.QuizActivity.Question;
import java.util.List;

public class QuestionAdapter extends RecyclerView.Adapter<QuestionAdapter.ViewHolder> {

    private final List<Question> questions;
    private final OnQuestionClickListener listener;

    public interface OnQuestionClickListener {
        void onQuestionClick(Question question);
    }

    public QuestionAdapter(List<Question> questions, OnQuestionClickListener listener) {
        this.questions = questions;
        this.listener = listener;
    }

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_task, parent, false);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        Question question = questions.get(position);

        holder.tvTaskTitle.setText(question.getQuestion());
    }

    @Override
    public int getItemCount() {
        return questions.size();
    }

    public void updateQuestions(List<Question> newQuestions) {
        questions.clear();
        questions.addAll(newQuestions);
        notifyDataSetChanged();
    }

    public static class ViewHolder extends RecyclerView.ViewHolder {
        public final TextView tvTaskTitle;
        public final TextView tvTaskDescription;
        public final TextView tvTaskSource;

        public ViewHolder(View itemView) {
            super(itemView);
            tvTaskTitle = itemView.findViewById(R.id.tvTaskTitle);
            tvTaskDescription = itemView.findViewById(R.id.tvTaskDescription);
            tvTaskSource = itemView.findViewById(R.id.tvTaskSource);
        }
    }
}


================================================================================
File: app/src/main/java/com/example/llmexample/adapter/TaskAdapter.java
Size: 2.11 kB
================================================================================

package com.example.llmexample.adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.llmexample.R;
import com.example.llmexample.model.Task;

import java.util.List;

public class TaskAdapter extends RecyclerView.Adapter<TaskAdapter.TaskViewHolder> {

    private List<Task> tasks;
    private final OnTaskClickListener listener;
    public interface OnTaskClickListener {
        void onTaskClick(String topic);  // Changed from Task to String
    }


    public TaskAdapter(List<Task> tasks, OnTaskClickListener listener) {
        this.tasks = tasks;
        this.listener = listener;
    }

    @NonNull
    @Override
    public TaskViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_task, parent, false);
        return new TaskViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull TaskViewHolder holder, int position) {
        Task task = tasks.get(position);
        holder.tvTitle.setText(task.getTitle());
        holder.tvDescription.setText(task.getDescription());
        holder.tvSource.setText(task.getSource());

        holder.itemView.setOnClickListener(v ->
                listener.onTaskClick(task.getTitle()));
    }

    @Override
    public int getItemCount() { return tasks.size(); }

    public void updateTasks(List<Task> newTasks) {
        tasks.clear();
        tasks.addAll(newTasks);
        notifyDataSetChanged();
    }

    static class TaskViewHolder extends RecyclerView.ViewHolder {
        TextView tvTitle, tvDescription, tvSource;

        public TaskViewHolder(@NonNull View itemView) {
            super(itemView);
            tvTitle = itemView.findViewById(R.id.tvTaskTitle);
            tvDescription = itemView.findViewById(R.id.tvTaskDescription);
            tvSource = itemView.findViewById(R.id.tvTaskSource);
        }
    }
}


================================================================================
File: app/src/main/java/com/example/llmexample/helper/DatabaseHelper.java
Size: 7.76 kB
================================================================================

package com.example.llmexample.helper;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class DatabaseHelper extends SQLiteOpenHelper {

    // Public constants
    public static final String TABLE_USERS = "users";
    public static final String COLUMN_ID = "id";
    public static final String COLUMN_USERNAME = "username";
    public static final String COLUMN_PASSWORD = "password";

    private static final String DATABASE_NAME = "LLMLearning.db";
    private static final int DATABASE_VERSION = 1;


    // Topics Table
    public static final String TABLE_TOPICS = "topics";
    public static final String COLUMN_TOPIC = "topic";
    public static final String COLUMN_USER_ID = "user_id";

    // Results Table
    public static final String TABLE_RESULTS = "results";
    public static final String COLUMN_SCORE = "score";
    public static final String COLUMN_TOTAL = "total";
    public static final String COLUMN_TIMESTAMP = "timestamp";

    public DatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create users table
        String CREATE_USERS_TABLE = "CREATE TABLE " + TABLE_USERS + "("
                + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_USERNAME + " TEXT UNIQUE,"
                + COLUMN_PASSWORD + " TEXT)";
        db.execSQL(CREATE_USERS_TABLE);

        // Create topics table
        String CREATE_TOPICS_TABLE = "CREATE TABLE " + TABLE_TOPICS + "("
                + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_USER_ID + " INTEGER,"
                + COLUMN_TOPIC + " TEXT,"
                + "FOREIGN KEY(" + COLUMN_USER_ID + ") REFERENCES "
                + TABLE_USERS + "(" + COLUMN_ID + "))";
        db.execSQL(CREATE_TOPICS_TABLE);

        // Create results table
        String CREATE_RESULTS_TABLE = "CREATE TABLE " + TABLE_RESULTS + "("
                + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_USER_ID + " INTEGER,"
                + COLUMN_SCORE + " INTEGER,"
                + COLUMN_TOTAL + " INTEGER,"
                + COLUMN_TIMESTAMP + " DATETIME DEFAULT CURRENT_TIMESTAMP,"
                + "FOREIGN KEY(" + COLUMN_USER_ID + ") REFERENCES "
                + TABLE_USERS + "(" + COLUMN_ID + "))";
        db.execSQL(CREATE_RESULTS_TABLE);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_USERS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_TOPICS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_RESULTS);
        onCreate(db);
    }

    // User operations
    public boolean addUser(String username, String password) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_USERNAME, username);
        values.put(COLUMN_PASSWORD, password);
        long result = db.insert(TABLE_USERS, null, values);
        return result != -1;
    }

    public boolean checkUsername(String username) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.query(TABLE_USERS,
                new String[]{COLUMN_ID},
                COLUMN_USERNAME + " = ?",
                new String[]{username},
                null, null, null);
        int count = cursor.getCount();
        cursor.close();
        return count > 0;
    }

    public boolean checkCredentials(String username, String password) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.query(TABLE_USERS,
                new String[]{COLUMN_ID},
                COLUMN_USERNAME + " = ? AND " + COLUMN_PASSWORD + " = ?",
                new String[]{username, password},
                null, null, null);
        int count = cursor.getCount();
        cursor.close();
        return count > 0;
    }

    public int getUserId(String username) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.query(TABLE_USERS,
                new String[]{COLUMN_ID},
                COLUMN_USERNAME + " = ?",
                new String[]{username},
                null, null, null);

        if(cursor.moveToFirst()) {
            int id = cursor.getInt(0);
            cursor.close();
            return id;
        }
        cursor.close();
        return -1;
    }

    // Topic operations
    public boolean addUserTopics(int userId, List<String> topics) {
        SQLiteDatabase db = this.getWritableDatabase();
        db.beginTransaction();
        try {
            // Clear existing topics
            db.delete(TABLE_TOPICS, COLUMN_USER_ID + " = ?", new String[]{String.valueOf(userId)});

            // Insert new topics
            ContentValues values = new ContentValues();
            for (String topic : topics) {
                values.put(COLUMN_USER_ID, userId);
                values.put(COLUMN_TOPIC, topic);
                db.insert(TABLE_TOPICS, null, values);
                values.clear();
            }
            db.setTransactionSuccessful();
            return true;
        } catch (Exception e) {
            return false;
        } finally {
            db.endTransaction();
        }
    }

    public List<String> getUserTopics(int userId) {
        List<String> topics = new ArrayList<>();
        SQLiteDatabase db = getReadableDatabase();

        // Use try-with-resources for automatic closing
        try (Cursor cursor = db.query(
                TABLE_TOPICS,
                new String[]{COLUMN_TOPIC},
                COLUMN_USER_ID + " = ?",
                new String[]{String.valueOf(userId)},
                null, null, null)) {

            if (cursor.moveToFirst()) {
                do {
                    topics.add(cursor.getString(0));
                } while (cursor.moveToNext());
            }
        } catch (Exception e) {
            Log.e("DB_ERROR", "Failed to get topics", e);
        }
        return topics;
    }

    // Result operations
    public boolean addQuizResult(int userId, int score, int total) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(COLUMN_USER_ID, userId);
        values.put(COLUMN_SCORE, score);
        values.put(COLUMN_TOTAL, total);
        long result = db.insert(TABLE_RESULTS, null, values);
        return result != -1;
    }

    public List<String> getQuizResults(int userId) {
        List<String> results = new ArrayList<>();
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT " + COLUMN_SCORE + ", " + COLUMN_TOTAL + ", " +
                COLUMN_TIMESTAMP + " FROM " + TABLE_RESULTS +
                " WHERE " + COLUMN_USER_ID + " = ?" +
                " ORDER BY " + COLUMN_TIMESTAMP + " DESC";

        Cursor cursor = db.rawQuery(query, new String[]{String.valueOf(userId)});
        if (cursor.moveToFirst()) {
            do {
                String result = "Score: " + cursor.getInt(0) + "/" + cursor.getInt(1) +
                        " - " + cursor.getString(2);
                results.add(result);
            } while (cursor.moveToNext());
        }
        cursor.close();
        return results;
    }


}

================================================================================
File: app/src/main/java/com/example/llmexample/model/Question.java
Size: 558 B
================================================================================

package com.example.llmexample.model;

import org.json.JSONArray;

public class Question {
    private final String question;
    private final JSONArray options;
    private final int correctIndex;

    public Question(String question, JSONArray options, int correctIndex) {
        this.question = question;
        this.options = options;
        this.correctIndex = correctIndex;
    }

    public String getQuestion() { return question; }
    public JSONArray getOptions() { return options; }
    public int getCorrectIndex() { return correctIndex; }

}

================================================================================
File: app/src/main/java/com/example/llmexample/model/Task.java
Size: 473 B
================================================================================

package com.example.llmexample.model;

public class Task {
    private String title;
    private String description;
    private String source;

    public Task(String title, String description, String source) {
        this.title = title;
        this.description = description;
        this.source = source;
    }

    public String getTitle() { return title; }
    public String getDescription() { return description; }
    public String getSource() { return source; }
}

================================================================================
File: app/src/main/res/color/topic_text_selector.xml
Size: 259 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_selected="true" android:color="@color/topic_text_selected"/>
    <item android:color="@color/topic_text_default"/>
</selector>

================================================================================
File: app/src/main/res/drawable/ic_launcher_background.xml
Size: 5.61 kB
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


================================================================================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
Size: 1.7 kB
================================================================================

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================================================================================
File: app/src/main/res/drawable/launch_screen_background.xml
Size: 161 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="@color/purple_500"/>
</shape>

================================================================================
File: app/src/main/res/drawable/loading_background.xml
Size: 276 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#F0F0F0" /> <!-- Light gray background -->
    <corners android:radius="12dp" /> <!-- Rounded corners -->
</shape>

================================================================================
File: app/src/main/res/drawable/progress_background.xml
Size: 288 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <solid android:color="#80D3D3D3" /> <!-- Light gray with 50% opacity -->
    <size
        android:width="60dp"
        android:height="60dp" />
</shape>

================================================================================
File: app/src/main/res/drawable/topic_button_selector.xml
Size: 238 B
================================================================================

<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_selected="true"
        android:drawable="@color/selected_topic_color" />
    <item android:drawable="@color/default_topic_color" />
</selector>

================================================================================
File: app/src/main/res/layout/activity_dashboard.xml
Size: 950 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/tvWelcome"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="24sp"
        android:textStyle="bold"/>

    <TextView
        android:id="@+id/tvTaskCount"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:textSize="18sp"/>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvTasks"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="24dp"
        android:scrollbars="vertical"/>

</LinearLayout>

================================================================================
File: app/src/main/res/layout/activity_login.xml
Size: 2.27 kB
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="24dp"
    android:gravity="center">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Welcome, Student!\nLet's Start Learning!"
        android:textSize="24sp"
        android:textAlignment="center"
        android:layout_marginBottom="48dp"/>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/usernameLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginBottom="16dp">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etUsername"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Username"
            android:inputType="text"/>
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/passwordLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginBottom="24dp">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etPassword"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Password"
            android:inputType="textPassword"/>
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.button.MaterialButton
        android:id="@+id/btnLogin"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Login"
        android:layout_marginBottom="16dp"/>

    <TextView
        android:id="@+id/tvSignup"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Need an Account? Sign Up"
        android:textColorLink="@color/blue"
        android:textColor="@color/white"/>

</LinearLayout>

================================================================================
File: app/src/main/res/layout/activity_main.xml
Size: 953 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:id="@+id/loadingContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:gravity="center"
        android:orientation="vertical"
        android:visibility="gone">

        <ProgressBar
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Loading..."
            android:layout_marginTop="8dp"/>
    </LinearLayout>

    <ListView
        android:id="@+id/listView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>

</RelativeLayout>

================================================================================
File: app/src/main/res/layout/activity_quiz.xml
Size: 2.14 kB
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:visibility="gone"/>

    <TextView
        android:id="@+id/tvProgress"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="16sp"
        android:textStyle="bold"/>

    <TextView
        android:id="@+id/tvQuestion"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:textSize="18sp"/>

    <RadioGroup
        android:id="@+id/radioGroup"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:orientation="vertical">

        <RadioButton
            android:id="@+id/optionA"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"/>

        <RadioButton
            android:id="@+id/optionB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"/>

        <RadioButton
            android:id="@+id/optionC"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"/>

        <RadioButton
            android:id="@+id/optionD"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/>
    </RadioGroup>

    <Button
        android:id="@+id/btnNext"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="Next"/>

</LinearLayout>

================================================================================
File: app/src/main/res/layout/activity_results.xml
Size: 720 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="24dp">

    <TextView
        android:id="@+id/tvScore"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="24sp"
        android:textStyle="bold"/>

    <Button
        android:id="@+id/btnContinue"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Continue"
        android:layout_marginTop="24dp"/>

</LinearLayout>

================================================================================
File: app/src/main/res/layout/activity_signup.xml
Size: 3.02 kB
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<ScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="24dp">

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Create New Account"
            android:textSize="24sp"
            android:layout_gravity="center_horizontal"
            android:layout_marginBottom="32dp"/>

        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etUsername"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Username"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etPassword"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Password"
                android:inputType="textPassword"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="24dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etConfirmPassword"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Confirm Password"
                android:inputType="textPassword"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnSignup"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Create Account"/>

        <TextView
            android:id="@+id/tvLogin"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Already have an account? Login"
            android:layout_gravity="center_horizontal"
            android:layout_marginTop="16dp"/>

    </LinearLayout>
</ScrollView>

================================================================================
File: app/src/main/res/layout/activity_topic_selection.xml
Size: 841 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <GridView
        android:id="@+id/gridTopics"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:columnWidth="120dp"
        android:horizontalSpacing="8dp"
        android:numColumns="2"
        android:stretchMode="columnWidth"
        android:verticalSpacing="8dp"/>

    <Button
        android:id="@+id/btnContinue"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Continue"
        android:layout_marginTop="16dp"/>

</LinearLayout>

================================================================================
File: app/src/main/res/layout/grid_item_topic.xml
Size: 447 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<Button xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/btnTopic"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    android:textSize="16sp"
    android:focusable="false"
    android:clickable="false"
    android:background="@drawable/topic_button_selector"
    android:textColor="@color/topic_text_selector"/>

================================================================================
File: app/src/main/res/layout/item_task.xml
Size: 1.08 kB
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp"
    android:background="?attr/selectableItemBackground"
    android:clickable="true"
    android:focusable="true">

    <TextView
        android:id="@+id/tvTaskTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:textStyle="bold"/>

    <TextView
        android:id="@+id/tvTaskDescription"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:textSize="14sp"/>

    <TextView
        android:id="@+id/tvTaskSource"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="4dp"
        android:textSize="12sp"
        android:textColor="@color/gray"/>

</LinearLayout>

================================================================================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
Size: 343 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================================================================================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
Size: 343 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================================================================================
File: app/src/main/res/values/colors.xml
Size: 580 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="blue">#2196F3</color>
    <color name="gray">#808080</color>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#9C27B0</color>
    <color name="purple_700">#FF7B1FA2</color>
    <color name="selected_topic_color">#808080</color>
    <color name="default_topic_color">#E0E0E0</color>
    <color name="topic_text_selected">#FFFFFF</color>
    <color name="topic_text_default">#000000</color>
</resources>

================================================================================
File: app/src/main/res/values/strings.xml
Size: 187 B
================================================================================

<resources>
    <string name="app_name">LLMExample</string>
    <string name="welcome_message">Hello, %s</string>
    <string name="task_count">You have %d tasks due</string>
</resources>

================================================================================
File: app/src/main/res/values/themes.xml
Size: 892 B
================================================================================

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme -->
    <style name="Theme.LLMExample" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your theme here -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
    </style>

    <!-- No Action Bar Theme -->
    <style name="Theme.LLMExample.NoActionBar" parent="Theme.LLMExample">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>

    <style name="Theme.LLMExample.Launcher" parent="Theme.AppCompat.Light.NoActionBar">
        <item name="android:windowBackground">@drawable/launch_screen_background</item>
        <item name="android:windowFullscreen">true</item>
    </style>
</resources>

================================================================================
File: app/src/main/res/values-night/themes.xml
Size: 330 B
================================================================================

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.LLMExample" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

================================================================================
File: app/src/main/res/xml/backup_rules.xml
Size: 478 B
================================================================================

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================================================================================
File: app/src/main/res/xml/data_extraction_rules.xml
Size: 551 B
================================================================================

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================================================================================
File: app/src/main/res/xml/network_security_config.xml
Size: 230 B
================================================================================

<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">192.168.8.155</domain>
    </domain-config>
</network-security-config>


================================================================================
File: app/src/test/java/com/example/llmexample/ExampleUnitTest.java
Size: 383 B
================================================================================

package com.example.llmexample;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}

================================================================================
File: build.gradle
Size: 163 B
================================================================================

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
alias(libs.plugins.android.application) apply false
}

================================================================================
File: gradle/libs.versions.toml
Size: 940 B
================================================================================

[versions]
agp = "8.8.2"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
appcompat = "1.7.0"
material = "1.12.0"
activity = "1.10.1"
constraintlayout = "2.2.1"

[libraries]
junit = { group = "junit", name = "junit", version.ref = "junit" }
ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }



================================================================================
File: gradle/wrapper/gradle-wrapper.properties
Size: 234 B
================================================================================

#Tue Apr 08 15:57:17 AEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


================================================================================
File: gradle.properties
Size: 1.25 kB
================================================================================

# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================================================================================
File: gradlew
Size: 5.77 kB
================================================================================

#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"


================================================================================
File: gradlew.bat
Size: 2.67 kB
================================================================================

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


================================================================================
File: settings.gradle
Size: 533 B
================================================================================

pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "LLMExample"
include ':app'

