package com.example.llmexample.activity;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.llmexample.R;
import com.example.llmexample.adapter.QuestionAdapter;
import com.example.llmexample.adapter.TaskAdapter;
import com.example.llmexample.helper.DatabaseHelper;
import com.example.llmexample.model.Task;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DashboardActivity extends AppCompatActivity {
    private static final String TAG = "DashboardActivity";
    private TextView tvWelcome, tvTaskCount;
    private RecyclerView rvTasks;
    private DatabaseHelper dbHelper;
    private TaskAdapter adapter;
    // In DashboardActivity's setupRecyclerView()
    // In DashboardActivity.java
    private void setupRecyclerView() {
        rvTasks = findViewById(R.id.rvTasks);
        rvTasks.setLayoutManager(new LinearLayoutManager(this));

        // Use TaskAdapter with String parameter
        adapter = new TaskAdapter(new ArrayList<>(), topic -> {
            startQuizActivity(topic);
        });

        rvTasks.setAdapter(adapter);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dashboard);

        initializeViews();
        setupRecyclerView();
        loadUserData();
        loadTasks();
    }

    private void initializeViews() {
        dbHelper = new DatabaseHelper(this);
        tvWelcome = findViewById(R.id.tvWelcome);
        tvTaskCount = findViewById(R.id.tvTaskCount);
        rvTasks = findViewById(R.id.rvTasks);
    }

    private void loadUserData() {
        SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
        String username = prefs.getString("username", "");
        tvWelcome.setText(getString(R.string.welcome_message, username));
    }

    private void loadTasks() {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Handler handler = new Handler(Looper.getMainLooper());

        executor.execute(() -> {
            // Background work
            String username = getCurrentUsername();
            int userId = dbHelper.getUserId(username);
            List<String> topics = dbHelper.getUserTopics(userId);
            List<Task> tasks = createTasksFromTopics(topics);

            handler.post(() -> {
                // UI Thread work
                handleTasksLoaded(tasks);
            });
        });

    }

    private List<Task> createTasksFromTopics(List<String> topics) {
        List<Task> tasks = new ArrayList<>();
        for (String topic : topics) {
            tasks.add(new Task(
                    topic,
                    "Complete quiz on " + topic,
                    "Generated by AI"
            ));
        }
        return tasks;
    }

    private void handleTasksLoaded(List<Task> tasks) {
        if (tasks == null || tasks.isEmpty()) {
            showNoTasksError();
        } else {
            updateTaskDisplay(tasks);
        }
    }

    private void showNoTasksError() {
        Toast.makeText(this,
                "No tasks found! Please select topics first",
                Toast.LENGTH_LONG).show();
        redirectToTopicSelection();
    }

    private void updateTaskDisplay(List<Task> tasks) {
        tvTaskCount.setText(getString(R.string.task_count, tasks.size()));
        adapter.updateTasks(tasks);  // This should be using TaskAdapter
    }

    private void redirectToTopicSelection() {
        startActivity(new Intent(this, TopicSelectionActivity.class));
        finish();
    }

    private String getCurrentUsername() {
        SharedPreferences prefs = getSharedPreferences("user_prefs", MODE_PRIVATE);
        return prefs.getString("username", "");
    }

    private void startQuizActivity(String topic) {
        Intent intent = new Intent(this, QuizActivity.class);
        intent.putExtra("TOPIC", topic);
        startActivity(intent);
    }

    @Override
    protected void onResume() {
        super.onResume();
        loadTasks(); // Refresh tasks when returning to dashboard
    }

    private static class LoadTasksAsync extends AsyncTask<Void, Void, List<Task>> {
        private final WeakReference<DashboardActivity> activityReference;

        LoadTasksAsync(DashboardActivity context) {
            activityReference = new WeakReference<>(context);
        }

        @Override
        protected List<Task> doInBackground(Void... voids) {
            DashboardActivity activity = activityReference.get();
            if (activity == null || activity.isFinishing()) return null;

            try {
                String username = activity.getCurrentUsername();
                int userId = activity.dbHelper.getUserId(username);

                if (userId == -1) {
                    Log.e(TAG, "User not found in database");
                    return null;
                }

                List<String> topics = activity.dbHelper.getUserTopics(userId);
                Log.d(TAG, "Found " + topics.size() + " topics for user " + userId);

                return createTasksFromTopics(topics);
            } catch (Exception e) {
                Log.e(TAG, "Error loading tasks: " + e.getMessage(), e);
                return null;
            }
        }

        private List<Task> createTasksFromTopics(List<String> topics) {
            List<Task> tasks = new ArrayList<>();
            for (String topic : topics) {
                tasks.add(new Task(
                        topic,
                        "Complete quiz on " + topic,
                        "Generated by AI"
                ));
            }
            return tasks;
        }

        @Override
        protected void onPostExecute(List<Task> tasks) {
            DashboardActivity activity = activityReference.get();
            if (activity != null && !activity.isFinishing()) {
                activity.handleTasksLoaded(tasks);
            }
        }
    }
}